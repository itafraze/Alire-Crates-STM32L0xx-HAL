
/*----------------------------------------------------------------------------
  Start-up routine automatically generated by AdaCore's startup-gen
  based on template file crt0.S.tmplt
----------------------------------------------------------------------------*/

   .syntax unified
   .cpu cortex-m0plus
   .fpu softvfp
   .thumb

/*----------------------------------------------------------------------------
  Global declarations
----------------------------------------------------------------------------*/

   .global __vectors
   .global Reset_Handler

/*----------------------------------------------------------------------------
  Interrupts vector table
----------------------------------------------------------------------------*/

   .section .isr_vector,"a",%progbits
   .type __vectors, %object
   .align   2
__vectors:
   /*  Implemented Cortex-M0+ core interrupts. Reserved  */
   .word  _estack            /*  Top of Stack  */
   .word  Reset_Handler      /*  Reset  */
   .word  NMI_Handler        /*  Non Maskable Interrupt  */
   .word  HardFault_Handler  /*  Hard Fault  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  SVC_Handler        /*  SVCall  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  0                  /*  Reserved in STM32L0's Cortex-M0+  */
   .word  PendSV_Handler     /*  PendSV  */
   .word  SysTick_Handler    /*  SysTick  */

   /*  MCU interrupts  */
   .word WWDG_Handler /* 0 */
   .word PVD_Handler /* 1 */
   .word RTC_Handler /* 2 */
   .word FLASH_Handler /* 3 */
   .word RCC_Handler /* 4 */
   .word EXTI0_1_Handler /* 5 */
   .word EXTI2_3_Handler /* 6 */
   .word EXTI4_15_Handler /* 7 */
   .word unknown_interrupt_Handler /* 8 */
   .word DMA1_Channel1_Handler /* 9 */
   .word DMA1_Channel2_3_Handler /* 10 */
   .word DMA1_Channel4_5_Handler /* 11 */
   .word ADC1_COMP_Handler /* 12 */
   .word LPTIM1_Handler /* 13 */
   .word unknown_interrupt_Handler /* 14 */
   .word TIM2_Handler /* 15 */
   .word unknown_interrupt_Handler /* 16 */
   .word unknown_interrupt_Handler /* 17 */
   .word unknown_interrupt_Handler /* 18 */
   .word unknown_interrupt_Handler /* 19 */
   .word TIM21_Handler /* 20 */
   .word unknown_interrupt_Handler /* 21 */
   .word unknown_interrupt_Handler /* 22 */
   .word I2C1_Handler /* 23 */
   .word unknown_interrupt_Handler /* 24 */
   .word SPI1_Handler /* 25 */
   .word unknown_interrupt_Handler /* 26 */
   .word unknown_interrupt_Handler /* 27 */
   .word USART2_Handler /* 28 */
   .word LPUART1_Handler /* 29 */
   .word unknown_interrupt_Handler /* 30 */
   .word unknown_interrupt_Handler /* 31 */

   .size __vectors, . - __vectors

//----------------------------------------------------------------------------
//  Weak aliases for each exception and interrupt handler
//----------------------------------------------------------------------------

   /*  Cortex-M0+ core exceptions handlers  */
   .weak      NMI_Handler
   .thumb_set NMI_Handler,Default_Exception_Handler
   .weak      HardFault_Handler
   .thumb_set HardFault_Handler,Default_Exception_Handler
   .weak      SVC_Handler
   .thumb_set SVC_Handler,Default_Exception_Handler
   .weak      PendSV_Handler
   .thumb_set PendSV_Handler,Default_Exception_Handler
   .weak      SysTick_Handler
   .thumb_set SysTick_Handler,Default_Exception_Handler

   /*  MCU interrupt handlers  */
   .weak      WWDG_Handler
   .thumb_set WWDG_Handler,Default_Interrupt_Handler
   .weak      PVD_Handler
   .thumb_set PVD_Handler,Default_Interrupt_Handler
   .weak      RTC_Handler
   .thumb_set RTC_Handler,Default_Interrupt_Handler
   .weak      FLASH_Handler
   .thumb_set FLASH_Handler,Default_Interrupt_Handler
   .weak      RCC_Handler
   .thumb_set RCC_Handler,Default_Interrupt_Handler
   .weak      EXTI0_1_Handler
   .thumb_set EXTI0_1_Handler,Default_Interrupt_Handler
   .weak      EXTI2_3_Handler
   .thumb_set EXTI2_3_Handler,Default_Interrupt_Handler
   .weak      EXTI4_15_Handler
   .thumb_set EXTI4_15_Handler,Default_Interrupt_Handler
   .weak      DMA1_Channel1_Handler
   .thumb_set DMA1_Channel1_Handler,Default_Interrupt_Handler
   .weak      DMA1_Channel2_3_Handler
   .thumb_set DMA1_Channel2_3_Handler,Default_Interrupt_Handler
   .weak      DMA1_Channel4_5_Handler
   .thumb_set DMA1_Channel4_5_Handler,Default_Interrupt_Handler
   .weak      ADC1_COMP_Handler
   .thumb_set ADC1_COMP_Handler,Default_Interrupt_Handler
   .weak      LPTIM1_Handler
   .thumb_set LPTIM1_Handler,Default_Interrupt_Handler
   .weak      TIM2_Handler
   .thumb_set TIM2_Handler,Default_Interrupt_Handler
   .weak      TIM21_Handler
   .thumb_set TIM21_Handler,Default_Interrupt_Handler
   .weak      I2C1_Handler
   .thumb_set I2C1_Handler,Default_Interrupt_Handler
   .weak      SPI1_Handler
   .thumb_set SPI1_Handler,Default_Interrupt_Handler
   .weak      USART2_Handler
   .thumb_set USART2_Handler,Default_Interrupt_Handler
   .weak      LPUART1_Handler
   .thumb_set LPUART1_Handler,Default_Interrupt_Handler
   .weak      unknown_interrupt_Handler
   .thumb_set unknown_interrupt_Handler,Default_Interrupt_Handler

/*----------------------------------------------------------------------------
   Copy information (source, destination, words_length)
----------------------------------------------------------------------------*/

   .section .copyinfo,"a",%progbits

   /*  Copy content of section .data from FLASH to SRAM  */
   .word  _ldata
   .word  _sdata
   .word  _wdata

   /*  Copy content of section .adata from AUNIT_FLASH to AUNIT_SRAM  */
   .word  _ladata
   .word  _sadata
   .word  _wadata

/*----------------------------------------------------------------------------
   Fill information (value, destination, words_length)
----------------------------------------------------------------------------*/

   .section .fillinfo,"a",%progbits

   /*  Clear section .bss  */
   .word  0
   .word  _sbss
   .word  _wbss

   /*  Clear section .abss in AUNIT_SRAM  */
   .word  0
   .word  _sabss
   .word  _wabss

/*----------------------------------------------------------------------------
  Handlers
----------------------------------------------------------------------------*/

   /*  Reset_Handler
    *  Executed upon uP reset
    */
   .text
   .type Reset_Handler,%function
   .thumb_func
   .align 2
Reset_Handler:

   /*  Set the stack pointer  */
   ldr   r0,=_estack
   mov   sp,r0

   /*  Copy based on .copysection */
   ldr   r4,=_scopyinfo
   ldr   r5,=_ecopyinfo
__copy_ranges:
   cmp   r4,r5
   bge   __skip_copy_ranges
   ldmia   r4!,{r0,r1,r2}
   bl    __copy_words
   bl    __copy_ranges
__skip_copy_ranges:

   /*  Fill based on .fillsection */
   ldr   r4,=_sfillinfo
   ldr   r5,=_efillinfo
__fill_ranges:
   cmp   r4,r5
   bge   __skip_fill_ranges
   ldmia   r4!,{r0,r1,r2}
   bl    __fill_words
   bl    __fill_ranges
__skip_fill_ranges:

   /*  Execute the system initialization procedure if it exists  */
   ldr   r0,=Cmsis_Device_System_Init
   cmp   r0,#0
   beq   __skip_cmsis_device_system_init
   blx    r0
__skip_cmsis_device_system_init:

   /*  Execute the libc initialization procedure if it exists  */
   .weak __libc_init_array
   ldr   r0,=__libc_init_array
   cmp   r0,#0
   beq   __skip_libc_init_array
   blx    r0
__skip_libc_init_array:

   /*  Initialise Ada  */
   .weak adainit
   ldr   r0,=adainit
   cmp   r0,#0
   beq   __skip_adainit
   blx    r0
__skip_adainit:

   /*  Jump to main if it is implemented, otherwise get stuck  */
   .weak main
   .thumb_set main, __infinite_loop
   bl    main

   /*  If this point is ever reached, restart  */
   b     Reset_Handler

   .size Reset_Handler, . - Reset_Handler

   /*  Default_Exception_Handler
    *  Executed upon ARM exception occurrence
    *  TODO Implement call to ADA function passing exception ID
    */
   .text
   .type Default_Exception_Handler,%function
   .thumb_func
   .align 2
Default_Exception_Handler:
   b     __infinite_loop

   /*  Default_Interrupt_Handler
    *  Executed upon ARM exception occurrence
    *  TODO Implement call to ADA function passing interrupt ID
    */
   .text
   .type Default_Interrupt_Handler,%function
   .thumb_func
   .align 2
Default_Interrupt_Handler:
   bx    lr

/*----------------------------------------------------------------------------
  Subroutines
----------------------------------------------------------------------------*/

   /*  __copy_words
    *  Copy continuous region by words (side effect on r0-r3)
    *     r0: source base address
    *     r1: destination base address
    *     r2: number of words
    */
   .text
   .type __copy_words,%function
   .thumb_func
   .align 2
__copy_words:
   cmp   r2,#0
   ble   __copy_words_return
   ldmia r0!,{r3}
   stmia r1!,{r3}
   subs  r2,r2,#1
   b     __copy_words
__copy_words_return:
   bx    lr
   .size __copy_words, . - __copy_words

   /*  __fill_words
    *  Fill continuous region by words (side effect on r1-r2)
    *     r0: fill value
    *     r1: destination base address
    *     r2: number of words
    */
   .text
   .type __fill_words,%function
   .thumb_func
   .align 2
__fill_words:
   cmp   r2,#0
   ble   __fill_words_return
   stmia r1!,{r0}
   subs   r2,r2,#1
   b     __fill_words
__fill_words_return:
   bx    lr
   .size __fill_words, . - __fill_words

   /*  __infinite_loop
    */
   .text
   .type __infinite_loop,%function
   .thumb_func
__infinite_loop:
   b     __infinite_loop